[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PECR Knowledge Hub",
    "section": "",
    "text": "Sitio de la asignatura Procesado de Señales e Imágenes Médicas en la Escuela Colombiana de Ingeniería\n\n\n\n22 ene 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSitio de la asignatura análisis numérico.\n\n\n\n1 jul 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCurso de Probabilidad computacional y estadística.\n\n\n\n6 feb 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMachine Learning\n\n\n\n6 feb 2023\n\n\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "index.html#clases",
    "href": "index.html#clases",
    "title": "PECR Knowledge Hub",
    "section": "",
    "text": "Sitio de la asignatura Procesado de Señales e Imágenes Médicas en la Escuela Colombiana de Ingeniería\n\n\n\n22 ene 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSitio de la asignatura análisis numérico.\n\n\n\n1 jul 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCurso de Probabilidad computacional y estadística.\n\n\n\n6 feb 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMachine Learning\n\n\n\n6 feb 2023\n\n\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "index.html#tutoriales",
    "href": "index.html#tutoriales",
    "title": "PECR Knowledge Hub",
    "section": "Tutoriales",
    "text": "Tutoriales\n\n\n\n\n\n\n\n\n\n\nPython programming\n\n\nA small tutorial in python in slides\n\n\n\n12 ago 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial de Python\n\n\nBreve Tutorial de Python\n\n\n\n6 feb 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComputación de seno y coseno usando expansión de Taylor\n\n\nUn ejemplo de clase del cálculo de una serie de Taylor sin uso de librerías especiales de Python – En construcción –\n\n\n\n6 feb 2023\n\n\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "index.html#proyectos",
    "href": "index.html#proyectos",
    "title": "PECR Knowledge Hub",
    "section": "Proyectos",
    "text": "Proyectos\n\n\n\n\n\n\n\n\n\n\nPredictive modeling for seizure detection in pharmacoresistant epilepsy: a machine learning approach\n\n\nMachine Learning\n\n\n\nInvalid Date\n\n\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "",
    "text": "Profesor Asociado en la Universidad Escuela Colombiana de Ingenieria, Analista de Datos con un sólido trasfondo como Ingeniero en Electrónica y Telecomunicaciones y Doctor en Ciencias de la Electrónica. Cuento con 20 años de experiencia en Educación Universitaria y una destacada participación en proyectos de investigación en el campo de la Ciencia de los Datos aplicada a las organizaciones, el aprendizaje y la ciencia. Mi enfoque se centra en utilizar mis habilidades técnicas y experiencia para analizar grandes conjuntos de datos y extraer conocimientos valiosos que impulsen la toma de decisiones informadas."
  },
  {
    "objectID": "about.html#section",
    "href": "about.html#section",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2016",
    "text": "2016\n- P. E. Caicedo-Rodríguez, Rengifo-Rodas, Carlos Felipe, y Rodríguez-Cheu, Luis Eduardo, «Contributions of electronic sciences to the problem of falls of old age population», 2016, doi: 10.17488/RMIB.37.3.6."
  },
  {
    "objectID": "about.html#section-1",
    "href": "about.html#section-1",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2017",
    "text": "2017\n- P. E. Caicedo-Rodríguez, C. F. Rengifo-Rodas, y L. E. Rodríguez-Cheu, «A human gait temporal parameters calculation algorithm», en VII Latin American Congress on Biomedical Engineering CLAIB 2016, Bucaramanga, Santander, Colombia, October 26th -28th, 2016, vol. 60, I. Torres, J. Bustamante, y D. A. Sierra, Eds., en IFMBE Proceedings, vol. 60. , Singapore: Springer Singapore, 2017, pp. 285-288. doi: 10.1007/978-981-10-4086-3_72."
  },
  {
    "objectID": "about.html#section-2",
    "href": "about.html#section-2",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2018",
    "text": "2018\n-  S. P. Castillo-Landínez y P. E. Caicedo-Rodríguez, «EL BLOG COMO HERRAMIENTA DE ENSEÑANZA EN LOS CURSOS DE INVESTIGACIÓN», presentado en Encuentro Internacional de Educación en Ingeniería ACOFI, Cartagena, Colombia, 2018."
  },
  {
    "objectID": "about.html#section-3",
    "href": "about.html#section-3",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2019",
    "text": "2019\n- N. Valencia-Jimenez et al., «A Comparative Study of Markerless Systems Based on Color-Depth Cameras, Polymer Optical Fiber Curvature Sensors, and Inertial Measurement Units: Towards Increasing the Accuracy in Joint Angle Estimation», Electronics, vol. 8, n.º 2, p. 173, feb. 2019, doi: 10.3390/electronics8020173.\n- S. P. Castillo-Landinez, P. E. Caicedo-Rodríguez, y D. F. Sánchez-Gómez, «Diseño e implementación de un software para la trazabilidad del proceso de beneficio del café», CTA, vol. 20, n.º 3, sep. 2019, doi: 10.21930/rcta.vol20_num3_art:1588.\n- P. E. Caicedo-Rodriguez, C. F. Rengifo-Rodas, L. E. Rodríguez-Cheu, y W. A. Sierra-Arevalo, «Gait Phase Detection for Lower Limb Prosthetic Devices», en Wearable Robotics: Challenges and Trends, vol. 22, M. C. Carrozza, S. Micera, y J. L. Pons, Eds., en Biosystems & Biorobotics, vol. 22. , Cham: Springer International Publishing, 2019, pp. 201-205. doi: 10.1007/978-3-030-01887-0_39.\n- S. P. Castillo-Landínez y P. E. Caicedo-Rodríguez, «ANÁLISIS DE SENTIMIENTOS, UNA HERRAMIENTA PARA VALORAR LA ACTITUD DEL ESTUDIANTE FRENTE A UN CURSO», presentado en Encuentro internacional de educación en ingeniería, Cartagena, Colombia, 2019.\nP. E. Caicedo-Rodríguez, C. F. Rengifo-Rodas, y L. E. Rodriguez-Cheu, «LA VELOCIDAD DE MARCHA COMO FACTOR DISCRIMINATORIO DEL RIESGO DE CAÍDA EN ADULTOS MAYORES», presentado en Encuentro internacional de educación en ingeniería, Cartagena, Colombia, 2019. doi: 10.26507/ponencia.282."
  },
  {
    "objectID": "about.html#section-4",
    "href": "about.html#section-4",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2020",
    "text": "2020\n- P. E. Caicedo-Rodríguez, C. F. Rengifo-Rodas, L. E. Rodriguez-Cheu, W. A. Sierra-Arevalo, y M. Catalina. Gómez-Guevara, «Dataset for gait analysis and assessment of fall risk for older adults», Data in Brief, vol. 33, p. 106550, dic. 2020, doi: 10.1016/j.dib.2020.106550.\n- P. E. Caicedo-Rodríguez, C. F. Rengifo-Rodas, L. E. Rodriguez-Cheu, W. A. Sierra-Arevalo, y M. Catalina. Gómez-Guevara, «Dataset for gait analysis and assessment of fall risk for older adults», Data in Brief, vol. 33, p. 106550, dic. 2020, doi: 10.1016/j.dib.2020.106550.\n- Y. H. Bolaños-Muñoz, C. F. Rengifo-Rodas, P. E. Caicedo-Rodríguez, L. E. Rodriguez-Cheu, y W. A. Sierra-Arevalo, «Electronic system for step width estimation using programmable system-on-chip technology and time of flight cameras», HardwareX, vol. 8, p. e00126, oct. 2020, doi: 10.1016/j.ohx.2020.e00126.\n- S. P. Castillo Landínez, P. E. Caicedo Rodríguez, y S. A. Muñoz De La Rosa, «LA EXPERIENCIA DE LA VIRTUALIDAD DURANTE LA CUARENTENA A TRAVÉS DEL ANÁLISIS DE SENTIMIENTOS. UN CASO DE ESTUDIO EN LA UNIAUTÓNOMA DEL CAUCA», en Encuentro Internacional de Educación en Ingeniería ACOFI 2020, Asociacion Colombiana de Facultades de Ingeniería - ACOFI, ago. 2020, pp. 1-8. doi: 10.26507/ponencia.820.\n- J. P. Henao-Pereira, A. E. Tovar-Leon, S. P. Castillo-Landínez, y P. E. Caicedo-Rodríguez, «Los accidentes de tránsito desde la perspectiva de la minería de datos. Una revisión de la literatura», Aibi revista investig. adm. ing., pp. 133-141, ago. 2020, doi: 10.15649/2346030X.743."
  },
  {
    "objectID": "about.html#section-5",
    "href": "about.html#section-5",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2021",
    "text": "2021\n- P. E. Caicedo-Rodríguez, Incidencia de los sistemas electrónicos de medición de variables biomecánicas en la concordancia intra e inter evaluador del examen POMA de función motora, Primera. Popayán, Colombia: Sello Editorial Uniautónoma del Cauca, 2021.\n- S. Castillo Landínez, P. E. Caicedo Rodríguez, S. A. Muñoz De La Rosa, y J. P. Sandoval Paz, «LA EXPERIENCIA DE LA VIRTUALIDAD DURANTE LA PANDEMIA, UN AÑO DESPUÉS», en Encuentro Internacional de Educación en Ingeniería ACOFI 2021, Asociacion Colombiana de Facultades de Ingeniería - ACOFI, sep. 2021, pp. 1-9. doi: 10.26507/ponencia.2005.\n- L. S. Vargas-Valencia et al., «Sleeve for Knee Angle Monitoring: An IMU-POF Sensor Fusion System», IEEE J. Biomed. Health Inform., vol. 25, n.º 2, pp. 465-474, feb. 2021, doi: 10.1109/JBHI.2020.2988360.\n- C. R. Malaver-Flor y M. Y. Astorquiza-Velasco, «Técnicas de Procesamiento Para Variables Posturales Enfocadas en Detección Temprana Del Microtraumatismo Tisular de un Ciclista», PROSPECTIVA, vol. 19, n.º 2, 2021."
  },
  {
    "objectID": "about.html#section-6",
    "href": "about.html#section-6",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2022",
    "text": "2022\n- S. Castillo Landínez, P. E. Caicedo Rodríguez, y J. A. Mosquera Bolaños, «Los adolescentes y el uso de las redes sociales. Un análisis desde la óptica de la ciencia de datos y el procesamiento de lenguaje natural», presentado en Nuevas realidades para la educación en ingeniería: currículo, tecnología, medio ambiente y desarrollo, sep. 2022, pp. 1-8. doi: 10.26507/paper.2693.\n- V. Cerón Monje, C. E. Zúñiga Muñoz, S. P. Castillo Landínez, y P. E. Caicedo Rodríguez, «Análisis de sentimientos aplicado a la evaluación docente de la Corporación Universitaria Autónoma del Cauca», presentado en Nuevas realidades para la educación en ingeniería: currículo, tecnología, medio ambiente y desarrollo, sep. 2022, pp. 1-10. doi: 10.26507/paper.2308."
  },
  {
    "objectID": "about.html#section-7",
    "href": "about.html#section-7",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2023",
    "text": "2023\n- J. M. Cabrera Ángel, P. E. Caicedo-Rodríguez, y S. Castillo-Landínez, «Así nos vemos», Uniautonoma del Cauca, Popayán, 2023.\n- S. Castillo Landínez y P. E. Caicedo Rodríguez, «¡¡¡Ahora sí tocó poner atención porque hay que evaluar!!!», presentado en Ingeniería para transformar territorios, sep. 2023, pp. 1-10. doi: 10.26507/paper.2941."
  },
  {
    "objectID": "about.html#section-8",
    "href": "about.html#section-8",
    "title": "Ph.D. Pablo Eduardo Caicedo R",
    "section": "2024",
    "text": "2024"
  },
  {
    "objectID": "clases/Class_NumericalAnalysis.html",
    "href": "clases/Class_NumericalAnalysis.html",
    "title": "Análisis Numérico",
    "section": "",
    "text": "El análisis numérico es una rama de las matemáticas y la ciencia computacional que se enfoca en desarrollar algoritmos y técnicas para resolver problemas matemáticos mediante aproximaciones numéricas. Su objetivo es encontrar soluciones aproximadas a problemas que pueden ser difíciles o imposibles de resolver de manera exacta debido a su complejidad o naturaleza continua."
  },
  {
    "objectID": "clases/Class_NumericalAnalysis.html#física",
    "href": "clases/Class_NumericalAnalysis.html#física",
    "title": "Análisis Numérico",
    "section": "Física",
    "text": "Física\n\nSimulación de sistemas dinámicos\nMuchos sistemas físicos son gobernados por ecuaciones diferenciales que describen su comportamiento en el tiempo. Sin embargo, en muchos casos, estas ecuaciones son demasiado complejas para obtener soluciones analíticas. Aquí es donde entra en juego el análisis numérico, que permite simular el comportamiento de estos sistemas mediante la resolución numérica de las ecuaciones diferenciales. Por ejemplo, en la mecánica clásica, se pueden simular sistemas de partículas bajo la influencia de fuerzas gravitacionales o electromagnéticas para estudiar movimientos planetarios, trayectorias de proyectiles, etc. También en la mecánica cuántica, se pueden simular sistemas de partículas subatómicas para comprender su comportamiento y propiedades.\n\n\nResolución de problemas de transferencia de calor y fluidos\nEn la física, es común enfrentarse a problemas que involucran la transferencia de calor o el flujo de fluidos en sistemas complejos, como en la termodinámica, la hidrodinámica o la aerodinámica. Estos problemas a menudo están representados por ecuaciones diferenciales parciales, las cuales son difíciles o imposibles de resolver analíticamente. Aquí, el análisis numérico se convierte en una herramienta esencial para resolver estas ecuaciones y obtener soluciones aproximadas. Mediante técnicas como la simulación de Monte Carlo o los métodos de elementos finitos, es posible estudiar el comportamiento térmico y fluido de sistemas complejos, como la distribución de temperatura en un motor o la aerodinámica de un avión, lo que es crucial para el diseño y la optimización de muchos dispositivos y sistemas en la ingeniería y la industria."
  },
  {
    "objectID": "clases/Class_NumericalAnalysis.html#ingeniería",
    "href": "clases/Class_NumericalAnalysis.html#ingeniería",
    "title": "Análisis Numérico",
    "section": "Ingeniería",
    "text": "Ingeniería\n\nAnálisis estructural y diseño de ingeniería\nEn la ingeniería civil y mecánica, el análisis numérico es fundamental para el análisis y diseño de estructuras como puentes, edificios, presas, aviones, automóviles, entre otros. El método de elementos finitos (MEF) es una de las técnicas más utilizadas en esta área. Permite dividir estructuras complejas en elementos más pequeños, como triángulos o tetraedros, y aproximadamente resolver las ecuaciones de equilibrio y comportamiento mecánico de cada elemento. Estos métodos numéricos permiten calcular deformaciones, tensiones y cargas en las estructuras, así como determinar su resistencia, estabilidad y seguridad, lo que es crucial para garantizar que las construcciones sean seguras y eficientes.\n\n\nSimulación y modelado en ingeniería\nOtra aplicación importante del análisis numérico en la ingeniería es la simulación y modelado de sistemas complejos. Por ejemplo, en la ingeniería aeroespacial, se utilizan técnicas numéricas para simular el flujo de aire alrededor de aviones o cohetes, lo que permite estudiar la aerodinámica y optimizar el diseño de las aeronaves. En la ingeniería eléctrica, el análisis numérico se emplea para simular circuitos electrónicos complejos y analizar su comportamiento en diferentes condiciones. En la ingeniería química, se utilizan métodos numéricos para simular procesos de transporte de masa y calor en reactores y separadores. Estas simulaciones numéricas permiten a los ingenieros comprender mejor el comportamiento de sistemas complejos, realizar experimentos virtuales y realizar cambios de diseño de manera más rápida y económica antes de pasar a la fase de construcción y producción."
  },
  {
    "objectID": "clases/Class_NumericalAnalysis.html#economía",
    "href": "clases/Class_NumericalAnalysis.html#economía",
    "title": "Análisis Numérico",
    "section": "Economía",
    "text": "Economía\n\nModelado y simulación económica\nEl análisis numérico se utiliza extensamente para modelar y simular sistemas económicos complejos. Por ejemplo, en macroeconomía, se pueden desarrollar modelos computacionales que representen la interacción de múltiples variables económicas, como la inversión, el consumo, la inflación y el crecimiento económico. Estos modelos pueden ser sistemas de ecuaciones diferenciales o de diferencia que describen la dinámica de la economía a lo largo del tiempo. Mediante técnicas numéricas, como el método de Euler o métodos más sofisticados de resolución de ecuaciones diferenciales, se pueden realizar simulaciones para estudiar el comportamiento del sistema económico bajo diferentes condiciones y escenarios, lo que ayuda a los economistas a tomar decisiones informadas y entender mejor las implicaciones de las políticas económicas.\n\n\nValoración de activos financieros\nEn el ámbito financiero, el análisis numérico es esencial para la valoración de activos, como opciones, bonos y otros instrumentos financieros. Por ejemplo, en el mercado de opciones, los modelos de valoración de opciones, como el modelo Black-Scholes, implican resolver ecuaciones diferenciales parciales complejas. El análisis numérico permite calcular de manera eficiente los precios de las opciones y otros derivados financieros, lo que es crucial para los inversores, gestores de fondos y compañías que utilizan estos instrumentos para gestionar riesgos y tomar decisiones de inversión. Además, el análisis numérico es útil para calcular métricas financieras como el valor actual neto (VAN) y la tasa interna de retorno (TIR), que son fundamentales para la toma de decisiones en proyectos de inversión y evaluación de negocios."
  },
  {
    "objectID": "clases/Class_NumericalAnalysis.html#biología",
    "href": "clases/Class_NumericalAnalysis.html#biología",
    "title": "Análisis Numérico",
    "section": "Biología",
    "text": "Biología\n\nModelado de sistemas biológicos\nEl análisis numérico se utiliza para desarrollar modelos matemáticos que describen el comportamiento y la dinámica de sistemas biológicos. Por ejemplo, en la ecología, se pueden crear modelos que describan las interacciones entre diferentes especies en un ecosistema, incluidas las tasas de crecimiento, la competencia por recursos y la depredación. Estos modelos pueden ser representados mediante ecuaciones diferenciales o sistemas de ecuaciones que reflejen las relaciones entre las variables biológicas relevantes. El análisis numérico permite simular el comportamiento de estos sistemas y estudiar cómo cambian con el tiempo o en respuesta a cambios en las condiciones ambientales. Además, en la biología molecular, se utilizan modelos numéricos para simular la dinámica de sistemas bioquímicos, como redes de reacciones enzimáticas o interacciones entre moléculas, lo que es crucial para comprender los mecanismos subyacentes de procesos biológicos complejos.\n\n\nAnálisis de datos biológicos\nEn biología, se generan grandes cantidades de datos a partir de técnicas experimentales como la secuenciación genética, la microscopía y otros métodos de análisis molecular. El análisis numérico es esencial para procesar y analizar estos datos de manera eficiente y extraer información relevante. Por ejemplo, en bioinformática, se utilizan algoritmos numéricos para analizar secuencias de ADN y proteínas, identificar genes importantes, realizar análisis de expresión génica y buscar similitudes entre secuencias biológicas. Además, el análisis numérico se aplica en la imagenología médica para procesar imágenes de resonancia magnética (IRM), tomografía computarizada (TC) o imágenes microscópicas, lo que permite detectar patrones y características específicas en las imágenes que son relevantes para el diagnóstico y la investigación en biología y medicina."
  },
  {
    "objectID": "clases/Class_NumericalAnalysis.html#ciencia-de-datos",
    "href": "clases/Class_NumericalAnalysis.html#ciencia-de-datos",
    "title": "Análisis Numérico",
    "section": "Ciencia de datos",
    "text": "Ciencia de datos\n\nAprendizaje automático (Machine Learning)\nEl análisis numérico es esencial en el campo del aprendizaje automático, donde se utilizan algoritmos para entrenar modelos y hacer predicciones a partir de datos. En el aprendizaje supervisado, se utilizan técnicas numéricas para ajustar los parámetros de los modelos y minimizar la diferencia entre las predicciones y las salidas reales. Ejemplos de algoritmos de aprendizaje supervisado son las máquinas de soporte vectorial (SVM), regresión lineal, regresión logística, árboles de decisión, etc. Además, en el aprendizaje no supervisado, como el clustering y la reducción de dimensionalidad, se emplean técnicas numéricas para agrupar datos y encontrar estructuras ocultas en ellos. El análisis numérico permite realizar estos cálculos complejos de manera eficiente y precisa, lo que es crucial para el desarrollo y despliegue de modelos de aprendizaje automático en aplicaciones prácticas.\n\n\nAnálisis exploratorio de datos y visualización\nEn el análisis de datos, es común realizar tareas de exploración y visualización para entender mejor las características y patrones presentes en los conjuntos de datos. El análisis numérico es esencial para calcular resúmenes estadísticos, como promedios, medianas, desviaciones estándar y cuartiles, que proporcionan información valiosa sobre la distribución de los datos. Además, las técnicas de visualización de datos, como gráficos y diagramas, también se basan en el análisis numérico para representar de manera efectiva la información contenida en los datos. Algoritmos numéricos como el muestreo, la interpolación y la aproximación se utilizan para generar gráficos y visualizaciones informativas que facilitan la comprensión y toma de decisiones basadas en datos."
  },
  {
    "objectID": "clases/Class_Statistics.html",
    "href": "clases/Class_Statistics.html",
    "title": "Probabilidad Computacional & Estadística",
    "section": "",
    "text": "Introducción\nLa Estadística es una disciplina que se ocupa de la recopilación, organización, análisis, interpretación y presentación de datos. En la aplicación de estadísticas a un problema científico, industrial o social, es convencional comenzar con una población estadística o un modelo estadístico a ser estudiado.\nLas poblaciones pueden ser grupos diversos de personas u objetos como “todas las personas que viven en un país” o “cada átomo que compone un cristal”. La estadística se ocupa de todos los aspectos de los datos, incluyendo la planificación de la recopilación de datos en términos del diseño de encuestas y experimentos.\nCuando no se pueden recopilar datos del censo, los estadísticos recopilan datos desarrollando diseños experimentales específicos y muestras de encuestas. La muestra representativa asegura que las inferencias y conclusiones pueden extenderse razonablemente de la muestra a la población en general.\nUn estudio experimental implica tomar medidas del sistema bajo estudio, manipular el sistema y luego tomar medidas adicionales utilizando el mismo procedimiento para determinar si la manipulación ha modificado los valores de las medidas. En contraste, un estudio observacional no implica manipulación experimental.\nLos dos métodos estadísticos principales utilizados en el análisis de datos son:\n- Estadísticas descriptivas, que resumen los datos de una muestra utilizando índices como la media o la desviación estándar.\n- Estadísticas inferenciales, que extraen conclusiones a partir de datos que están sujetos a variación aleatoria (por ejemplo, errores observacionales, variación de muestreo).\nLas inferencias en estadísticas matemáticas se hacen bajo el marco de la teoría de probabilidad, que se ocupa del análisis de fenómenos aleatorios. Un procedimiento estadístico estándar implica la recopilación de datos que conducen a una prueba de la relación entre dos conjuntos de datos estadísticos, o un conjunto de datos y datos sintéticos extraídos de un modelo idealizado.\n\n\nObjetivo de la clase\nLa Estadística Descriptiva es una rama de la estadística que se ocupa de resumir, organizar y presentar los datos de manera significativa y concisa. Se centra en describir y analizar las características principales de un conjunto de datos sin hacer generalizaciones o inferencias a una población más grande.\nLas estadísticas descriptivas suelen incluir medidas como la tendencia central (por ejemplo, media, mediana, moda), la dispersión (por ejemplo, rango, varianza, desviación estándar) y la forma de la distribución (por ejemplo, asimetría, curtosis).\nAdemás, las estadísticas descriptivas implican una representación gráfica de los datos a través de gráficos, gráficas y tablas, que pueden ayudar aún más en la visualización e interpretación de la información.\n\n\nAplicaciones de la Estadística Descriptiva\nLa Estadística Descriptiva se utiliza en diversas aplicaciones:\n\nInformes de Tráfico y Compromiso: Un ejemplo de análisis descriptivo es la generación de informes.\nAnálisis de Estados Financieros: Otro ejemplo familiar de análisis descriptivo es el análisis de estados financieros.\nTendencias de Demanda: Las estadísticas descriptivas pueden ayudar a identificar y analizar las tendencias de demanda.\nResultados Agregados de Encuestas: Los resultados agregados de las encuestas pueden ser resumidos y presentados utilizando estadísticas descriptivas.\nProgreso hacia Metas: Las estadísticas descriptivas pueden ser útiles para rastrear y presentar el progreso hacia las metas establecidas.\n\nEn resumen, las estadísticas descriptivas proporcionan un resumen claro y conciso de los datos, permitiendo a los investigadores o analistas obtener información y comprender patrones, tendencias y distribuciones dentro del conjunto de datos. Esto facilita una mejor comprensión de los datos y proporciona una base para un análisis estadístico más profundo o procesos de toma de decisiones.\n\n\nMaterial del curso\nPresentacion"
  },
  {
    "objectID": "clases/Class_PSIM.html",
    "href": "clases/Class_PSIM.html",
    "title": "Procesado de Señales e Imágenes Médicas",
    "section": "",
    "text": "“Un área de rápido crecimiento y variedad de aplicaciones en la ingeniería biomédica a nivel nacional y global es el procesamiento digital de señales e imágenes médicas. Es por eso, que a través de este curso se desea dar las herramientas necesarias para los graduados del programa puedan tener competencias básicas en las técnicas clásicas y algunas técnicas modernas de procesamiento de señales e imágenes. La primera parte del curso se encuentra enfocada al desarrollo de técnicas de procesamiento para señales biomédicas unidimensionales, exponiendo primero su origen fisiológico y siguiendo con la presentación de las principales técnicas para su análisis y procesamiento. La segunda parte del curso hace énfasis en el estudio de imágenes médicas, partiendo de una explicación de los principales métodos computacionales utilizados para procesamiento digital de imágenes y luego exponiendo brevemente el proceso de su formación. A través de prácticas de laboratorio con señales e imágenes médicas (reales o simuladas), el estudiante podrá aplicar y reforzar los conocimientos aprendidos en el curso” fragmento tomado del microcurriculo de la asignatura.\nEl curso está dividido en 3 partes:\n(i) Repaso de conceptos de probabilidad y estadística\n(ii) Aplicaciones al procesamiento de señales de origen fisiológico.\n(iii) Procesamiento de imágenes digitales"
  },
  {
    "objectID": "clases/Class_PSIM.html#presentaciones",
    "href": "clases/Class_PSIM.html#presentaciones",
    "title": "Procesado de Señales e Imágenes Médicas",
    "section": "Presentaciones",
    "text": "Presentaciones\n\nPresentación del curso\nParteI: Probabilidad y Estadística\nParteII: Un ejemplo de ECG\nProcesamiento de imágenes 1/4\nProcesamiento de imágenes 2/4\nProcesamiento de imágenes 3/4\nProcesamiento de imágenes 4/4"
  },
  {
    "objectID": "clases/Class_PSIM.html#laboratorios",
    "href": "clases/Class_PSIM.html#laboratorios",
    "title": "Procesado de Señales e Imágenes Médicas",
    "section": "Laboratorios",
    "text": "Laboratorios\n\nLaboratorio 01\nLaboratorio 02\nLaboratorio 03\nLaboratorio 04\nProyecto Final"
  },
  {
    "objectID": "clases/Class_ML.html",
    "href": "clases/Class_ML.html",
    "title": "Machine Learning",
    "section": "",
    "text": "Que es ?\nEl aprendizaje automático (machine learning) es una rama de la inteligencia artificial que permite a los sistemas aprender y mejorar de la experiencia sin ser explícitamente programados. Esto significa que los sistemas de aprendizaje automático pueden identificar patrones en los datos y usar esos patrones para hacer predicciones o tomar decisiones.\nHay muchos tipos diferentes de algoritmos de aprendizaje automático, pero todos ellos funcionan de manera similar. Primero, el algoritmo se “entrena” con un conjunto de datos. Este conjunto de datos contiene ejemplos de los tipos de problemas que el algoritmo debe resolver. Por ejemplo, si el algoritmo está diseñado para clasificar imágenes, el conjunto de datos podría contener imágenes de gatos y perros.\nUna vez que el algoritmo está entrenado, puede usar los patrones que ha aprendido para hacer predicciones sobre nuevos datos. Por ejemplo, si se le muestra una nueva imagen de un animal, el algoritmo podría predecir si es un gato o un perro.\nEl aprendizaje automático es una tecnología muy poderosa que se puede aplicar a una amplia gama de problemas. Algunos ejemplos de aplicaciones de aprendizaje automático incluyen:\n\nClasificación de imágenes\nReconocimiento de voz\nDetección de fraudes\nRecomendación de productos\nOptimización de rutas\n\nEl aprendizaje automático es una tecnología en constante evolución, y se espera que se use cada vez más en los próximos años.\n\n\nMaterial del curso\nPresentación\n\n\nReferencias\n\nB. Boehmke y B. M. Greenwell, Hands-on machine learning with R. Boca Raton: CRC Press, 2019.\nG. Bonaccorso, Mastering machine learning algorithms: expert techniques to implement popular machine learning algorithms and fine-tune your models. 2018.\nM. Fenner, Machine learning in python for everyone. Boston, MA: Addison-Wesley, 2019.\nK. Kolodiazhnyi, Hands-On Machine Learning with C++ Build, Train, and Deploy End-To-end Machine Learning and Deep Learning Pipelines. Birmingham: Packt Publishing, Limited, 2020. Accedido: 28 de septiembre de 2021.\nM. Kubat, An Introduction to Machine Learning. Cham: Springer International Publishing, 2017. doi: 10.1007/978-3-319-63913-0.\nS. Raschka y V. Mirjalili, Python machine learning: machine learning and deep learning with Python, scikit-learn, and TensorFlow, Second edition, Fourth release,[fully revised and Updated]. Birmingham Mumbai: Packt Publishing, 04.\nS. Skansi, Introduction to Deep Learning: From Logical Calculus to Artificial Intelligence. Cham: Springer International Publishing, 2018. doi: 10.1007/978-3-319-73004-2."
  },
  {
    "objectID": "tutoriales/TutorialPython.html",
    "href": "tutoriales/TutorialPython.html",
    "title": "Tutorial de Python",
    "section": "",
    "text": "Tomado del libro Ciencia de Datos para Ciencias Naturales\nSi no tiene experiencia con el lenguaje Markdown utilice esta guía para enriquecer sus celdas de texto.\n\n\n\nPlataforma de Google Research.\nPermite a cualquier persona escribir y ejecutar código Python o R a través del navegador.\nSe base se basa en la interfase de Jupyter Notebook.\nLos documentos son denominados notebooks de Colab.\nLos entornos son interactivos.\nPermite la utilizar Python y R.\nManejo de celdas de código\n\n\n\n\n\nNo requiere configuración del programa.\nLa mayoría de librerías y programas ya están preinstalados.\nAcceso gratuito a GPU, es decir, se ejecuta en los servidores de Google.\nFacilidad para compartir documentos.\n\n\n\n\n\nNo se ejecuta sin conexión.\nConjuntos de datos que se importan al entorno sin ser montado desde Google Drive se perderán cuando la máquina virtual se apague.\nExperiencia más sencilla que otras opciones.\nPermite utilizar más lenguajes: Posgres, Julia.\n\n\n\n\n\nCódigo: Para abrir una celda de código simplemente haga click en la barra + Código. Para ejecutar el código puede presionar el símbolo de play a la izquierda de la celda o las teclas Cmd/Ctrl+Enter.\nTexto: Para abrir una celda de texto simplemente haga click en la barra + Texto. Las celdas de texto utilizan la sintaxis de Markdown. Para ver el texto fuente de Markdown, haga doble click en una celda de texto."
  },
  {
    "objectID": "tutoriales/TutorialPython.html#características",
    "href": "tutoriales/TutorialPython.html#características",
    "title": "Tutorial de Python",
    "section": "",
    "text": "Plataforma de Google Research.\nPermite a cualquier persona escribir y ejecutar código Python o R a través del navegador.\nSe base se basa en la interfase de Jupyter Notebook.\nLos documentos son denominados notebooks de Colab.\nLos entornos son interactivos.\nPermite la utilizar Python y R.\nManejo de celdas de código"
  },
  {
    "objectID": "tutoriales/TutorialPython.html#ventajas",
    "href": "tutoriales/TutorialPython.html#ventajas",
    "title": "Tutorial de Python",
    "section": "",
    "text": "No requiere configuración del programa.\nLa mayoría de librerías y programas ya están preinstalados.\nAcceso gratuito a GPU, es decir, se ejecuta en los servidores de Google.\nFacilidad para compartir documentos."
  },
  {
    "objectID": "tutoriales/TutorialPython.html#desventajas-de-colab",
    "href": "tutoriales/TutorialPython.html#desventajas-de-colab",
    "title": "Tutorial de Python",
    "section": "",
    "text": "No se ejecuta sin conexión.\nConjuntos de datos que se importan al entorno sin ser montado desde Google Drive se perderán cuando la máquina virtual se apague.\nExperiencia más sencilla que otras opciones.\nPermite utilizar más lenguajes: Posgres, Julia."
  },
  {
    "objectID": "tutoriales/TutorialPython.html#tipos-de-celdas",
    "href": "tutoriales/TutorialPython.html#tipos-de-celdas",
    "title": "Tutorial de Python",
    "section": "",
    "text": "Código: Para abrir una celda de código simplemente haga click en la barra + Código. Para ejecutar el código puede presionar el símbolo de play a la izquierda de la celda o las teclas Cmd/Ctrl+Enter.\nTexto: Para abrir una celda de texto simplemente haga click en la barra + Texto. Las celdas de texto utilizan la sintaxis de Markdown. Para ver el texto fuente de Markdown, haga doble click en una celda de texto."
  },
  {
    "objectID": "tutoriales/TutorialPython.html#strings",
    "href": "tutoriales/TutorialPython.html#strings",
    "title": "Tutorial de Python",
    "section": "Strings",
    "text": "Strings\n\ncadena_caracteres = \" Diplomado en Analítica para la Banca \"\n\n#Tamaño de la cadena de caracteres\nprint(len(cadena_caracteres))\n\n#Corte de variable\nprint(cadena_caracteres[0:10])\nprint(cadena_caracteres[20:30])\n\n#Convertir la variable a mayúsculas\nprint(cadena_caracteres.upper())\n\n#Convertir la variable a minúscula\nprint(cadena_caracteres.lower())\n\n#Contar cuantas veces aparece una cadena de caracteres\nprint(cadena_caracteres.count(\"ca\"))\n\n#Reemplazar en una cadena, una letra con otra\nprint(cadena_caracteres.replace(\"a\", \"0\"))\n\n#Partir la cadena de caracteres cada vez que se encuentre un caracter\nprint(cadena_caracteres.split(\" \"))\n\n#Concatenar dos cadenas de caracteres\ncadena01 = \"Pablo Eduardo\"\ncadena02 = \"Caicedo Rodríguez\"\nprint(cadena01+\" \"+cadena02)\n\n38\n Diplomado\nica para l\n DIPLOMADO EN ANALÍTICA PARA LA BANCA \n diplomado en analítica para la banca \n2\n Diplom0do en An0lític0 p0r0 l0 B0nc0 \n['', 'Diplomado', 'en', 'Analítica', 'para', 'la', 'Banca', '']\nPablo Eduardo Caicedo Rodríguez"
  },
  {
    "objectID": "tutoriales/TutorialPython.html#listas",
    "href": "tutoriales/TutorialPython.html#listas",
    "title": "Tutorial de Python",
    "section": "Listas",
    "text": "Listas\n\nlista = [3, 2, 1, 0.5, \"hora del cafe\", \"torta chilena\", \"pinto\", \"jugo\"]\nprint(lista)\nlista.append(\"empanadita\")\nprint(lista)\n\"pinto\" in lista\n\n[3, 2, 1, 0.5, 'hora del cafe', 'torta chilena', 'pinto', 'jugo']\n[3, 2, 1, 0.5, 'hora del cafe', 'torta chilena', 'pinto', 'jugo', 'empanadita']\n\n\nTrue"
  },
  {
    "objectID": "tutoriales/TutorialPython.html#diccionarios",
    "href": "tutoriales/TutorialPython.html#diccionarios",
    "title": "Tutorial de Python",
    "section": "Diccionarios",
    "text": "Diccionarios\n\ntel = {'Maria': 4098, 'Jorge': 4139}\nprint(tel)\nprint(tel[\"Maria\"])\nprint(tel.keys())\nprint(tel.values)\n'Maria' in tel\n\n{'Maria': 4098, 'Jorge': 4139}\n4098\ndict_keys(['Maria', 'Jorge'])\n&lt;built-in method values of dict object at 0x7f27fa8ee380&gt;\n\n\nTrue"
  },
  {
    "objectID": "tutoriales/TutorialPython.html#tuplas",
    "href": "tutoriales/TutorialPython.html#tuplas",
    "title": "Tutorial de Python",
    "section": "Tuplas",
    "text": "Tuplas\n\nfrutas = ('naranja', 'mango', 'sandia', 'banano', 'kiwi')\nprint(type(frutas))\nfrutas[1]\n\n&lt;class 'tuple'&gt;\n\n\n'mango'"
  },
  {
    "objectID": "tutoriales/TutorialPython.html#numpy",
    "href": "tutoriales/TutorialPython.html#numpy",
    "title": "Tutorial de Python",
    "section": "Numpy",
    "text": "Numpy\nNumPy (Numerical Python), es una biblioteca de Python que da soporte para crear vectores y matrices grandes multidimensionales, junto con una gran colección de funciones matemáticas de alto nivel. La funcionalidad principal de NumPy es su estructura de datos ndarray (arreglos), para una matriz de n dimensiones, sobre las cuales se pueden realizar operaciones matemátias de manera eficiente.\nCrearemos una lista usando código nativo de Python y lo convertiremos en una matriz unidimensional con la función np.array()\n\nimport numpy as np\n\nlist1 = [6,8,10,12]\narray1 = np.array(list1)\nprint(array1)\n\n[ 6  8 10 12]\n\n\nLos ndarrays son estructuras de datos genéricas para almacenar datos homogéneos. Son equivalentes a las matrices y los vectores en álgebra, por lo que también se les puede aplicar operaciones matemáticas. Notar que las operaciones matemáticas se pueden realizar en todos los valores en un ndarray a la vez.\n\nprint(array1 - 2)\nprint(array1 * array1, \"\\n\\n\")\n\n[ 4  6  8 10]\n[ 36  64 100 144] \n\n\n\n\nLos arreglos se encierran entre [], pero al imprimirlos no están separados por comas. Hay diferentes formas de crear arreglos con propiedades específicas, lo que les provee bastante flexibilidad.\n\n# Crea una matriz con datos específicos\nprint(np.array([[1,2],[3,4]]),'\\n')\n# Crea una matriz con unos: tres filas y cuatro columnas\nprint(np.ones((3,4)),'\\n')\n# Crea una matriz con ceros: tres filas y cuatro columnas\nprint(np.zeros((3,4)),'\\n')\n# Crea una matriz con un dato específico: tres filas y cuatro columnas\nprint(np.full((3,4), 7.3),'\\n')\n# Crea un arreglo con datos seguidos: empieza en 10 termina en 30(sin incluir) con incrementos de 5.\nprint(np.arange(10,30,5),'\\n')\n# # Crea un arreglo con inicio y fin y una cantidad de datos: arreglo de 6 datos entre 0 y 5/3 .\nprint(np.linspace(0,5/3,6),'\\n')\n# Crea una matriz con datos aleatorios entre 0 y 1: dos filas y tres columnas\nprint(np.random.rand(2,3),'\\n')\n\n[[1 2]\n [3 4]] \n\n[[1. 1. 1. 1.]\n [1. 1. 1. 1.]\n [1. 1. 1. 1.]] \n\n[[0. 0. 0. 0.]\n [0. 0. 0. 0.]\n [0. 0. 0. 0.]] \n\n[[7.3 7.3 7.3 7.3]\n [7.3 7.3 7.3 7.3]\n [7.3 7.3 7.3 7.3]] \n\n[10 15 20 25] \n\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667] \n\n[[0.51946294 0.55394292 0.06630246]\n [0.00169133 0.03254956 0.37473189]] \n\n\n\n\narr1 = np.array([np.arange(0,5), np.arange(0,5)*5])\n#Arreglo\nprint(arr1, \"\\n\")\n# Forma\nprint(arr1.shape, \"\\n\")\n# Tamaño\nprint(arr1.size, \"\\n\")\n# Número de Dimensiones\nprint(arr1.ndim, \"\\n\")\n# Transpuesta\nprint(arr1.T, \"\\n\")\n\n[[ 0  1  2  3  4]\n [ 0  5 10 15 20]] \n\n(2, 5) \n\n10 \n\n2 \n\n[[ 0  0]\n [ 1  5]\n [ 2 10]\n [ 3 15]\n [ 4 20]] \n\n\n\n\narr = np.array([1,2,3,4,5,6,7])\n# Porcionar\nprint(arr[1:3])# de 1 al 3 en índice\nprint(arr[4:])# de la posición 4 en adelante\nprint(arr[::2])# de uno por medio\n\n[2 3]\n[5 6 7]\n[1 3 5 7]"
  },
  {
    "objectID": "tutoriales/ExpansionTaylor.html",
    "href": "tutoriales/ExpansionTaylor.html",
    "title": "Computación de seno y coseno usando expansión de Taylor",
    "section": "",
    "text": "Las ecuaciones de las expansiones de Taylor (centradas en cero) fueron extraídas de la recopilación que hizo Wikipedia\n\\[cos\\left(x\\right) = \\sum_{n=0}^{\\infty}{\\frac{x^{2n}}{2n!}\\left(-1\\right)^{n}}\\]\n\\[sin\\left(x\\right) = \\sum_{n=0}^{\\infty}{\\frac{\\left(-1\\right)^{n}}{\\left(2n+1\\right)!}x^{2n+1}}\\]\n\ndef factorial(x):\n    output = 1\n    for k in range(1,x+1):\n        output = output*k\n    return output\n\n\ndef sin_taylor_expansion(x,n):\n    pi = 3.141592653589793238462643383279502884197169399375105820974944\n    x = pi*x/180\n    output = 0\n    for k in range(0, n):\n        term = (((-1)**k)/factorial(2*k + 1))*(x**(2*k+1))\n        output = output+term\n    return output\n\n\nv_est = sin_taylor_expansion(30,5)\n\nprint(v_est)\n\nprint(\"Error Relativo:\", abs(0.5-v_est)/0.5)\n\n0.5000000000202799\nError Relativo: 4.0559777758630844e-11"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-1-introduction",
    "href": "presentaciones/pythonprogrammin.html#slide-1-introduction",
    "title": "Python programming",
    "section": "Slide 1: Introduction",
    "text": "Slide 1: Introduction\n\nPython is a high-level, interpreted programming language\nEasy to learn and understand\nVersatile and widely used in:\n\nWeb development\nData analysis and science\nArtificial intelligence and machine learning\nAutomation and scripting"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-2-basic-syntax",
    "href": "presentaciones/pythonprogrammin.html#slide-2-basic-syntax",
    "title": "Python programming",
    "section": "Slide 2: Basic Syntax",
    "text": "Slide 2: Basic Syntax\n\nIndentation is used to denote block-level structure\nVariables are assigned using the = operator\nPrint output using the print() function\nComments: # for single-line, ''' or \"\"\" for multi-line"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-3-data-types",
    "href": "presentaciones/pythonprogrammin.html#slide-3-data-types",
    "title": "Python programming",
    "section": "Slide 3: Data Types",
    "text": "Slide 3: Data Types\n\nIntegers: int (e.g., 1, 2, 3)\nFloats: float (e.g., 3.14, -0.5)\nStrings: str (e.g., 'hello', \"hello\")\nBoolean: bool (e.g., True, False)\nList: list (e.g., [1, 2, 3], ['a', 'b', 'c'])\nDictionary: dict (e.g., {'name': 'John', 'age': 30})"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-4-control-structures",
    "href": "presentaciones/pythonprogrammin.html#slide-4-control-structures",
    "title": "Python programming",
    "section": "Slide 4: Control Structures",
    "text": "Slide 4: Control Structures\n\nConditional statements:\n\nif statements: if condition : code\nelif statements: elif condition : code\nelse statements: else : code\n\nLoops:\n\nfor loops: for variable in iterable : code\nwhile loops: while condition : code"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-5-functions",
    "href": "presentaciones/pythonprogrammin.html#slide-5-functions",
    "title": "Python programming",
    "section": "Slide 5: Functions",
    "text": "Slide 5: Functions\n\nReusable blocks of code\nTake arguments and return values\nCan be used to:\n\nOrganize code\nReduce repetition\nEncapsulate complex logic\n\nFunction definition: def function_name (arguments) : code"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-6-modules",
    "href": "presentaciones/pythonprogrammin.html#slide-6-modules",
    "title": "Python programming",
    "section": "Slide 6: Modules",
    "text": "Slide 6: Modules\n\nPre-written code libraries\nImported using the import statement\nExamples:\n\nmath: mathematical functions (e.g., sin(), cos())\nrandom: random number generation (e.g., randint(), uniform())\ntime: time-related functions (e.g., time(), sleep())"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-7-file-inputoutput",
    "href": "presentaciones/pythonprogrammin.html#slide-7-file-inputoutput",
    "title": "Python programming",
    "section": "Slide 7: File Input/Output",
    "text": "Slide 7: File Input/Output\n\nReading from files:\n\nopen() function: open(file_name, mode)\nread() method: file.read()\n\nWriting to files:\n\nopen() function: open(file_name, mode)\nwrite() method: file.write()\n\nClosing files: close() method: file.close()"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-8-exception-handling",
    "href": "presentaciones/pythonprogrammin.html#slide-8-exception-handling",
    "title": "Python programming",
    "section": "Slide 8: Exception Handling",
    "text": "Slide 8: Exception Handling\n\nTry-except blocks:\n\ntry block: code that might raise an exception\nexcept block: code to handle the exception\n\nCatching specific exceptions:\n\nexcept ValueError : code\nexcept TypeError : code\n\nRaising exceptions:\n\nraise ValueError(message)"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-9-object-oriented-programming",
    "href": "presentaciones/pythonprogrammin.html#slide-9-object-oriented-programming",
    "title": "Python programming",
    "section": "Slide 9: Object-Oriented Programming",
    "text": "Slide 9: Object-Oriented Programming\n\nClasses:\n\nDefine custom data types\nEncapsulate data and behavior\n\nObjects:\n\nInstances of classes\nHave attributes (data) and methods (behavior)\n\nInheritance:\n\nCreate new classes based on existing ones\nInherit attributes and methods"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-10-advanced-topics",
    "href": "presentaciones/pythonprogrammin.html#slide-10-advanced-topics",
    "title": "Python programming",
    "section": "Slide 10: Advanced Topics",
    "text": "Slide 10: Advanced Topics\n\nDecorators:\n\nModify function behavior\nUse @ symbol to apply\n\nGenerators:\n\nSpecial type of iterable\nUse yield statement to define\n\nLambda functions:\n\nSmall, anonymous functions\nUse lambda keyword to define"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#slide-11-conclusion",
    "href": "presentaciones/pythonprogrammin.html#slide-11-conclusion",
    "title": "Python programming",
    "section": "Slide 11: Conclusion",
    "text": "Slide 11: Conclusion\n\nPython is a powerful and versatile language\nContinuously learning and practicing will help you master it\nExplore advanced topics and libraries to become proficient\n\n\n\n\n\nhttps://pacaicedo.github.io"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#introduction",
    "href": "presentaciones/pythonprogrammin.html#introduction",
    "title": "Python programming",
    "section": "Introduction",
    "text": "Introduction\n\nPython is a high-level, interpreted programming language\nEasy to learn and understand\nVersatile and widely used in:\n\nWeb development\nData analysis and science\nArtificial intelligence and machine learning\nAutomation and scripting"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#basic-syntax",
    "href": "presentaciones/pythonprogrammin.html#basic-syntax",
    "title": "Python programming",
    "section": "Basic Syntax",
    "text": "Basic Syntax\n\nIndentation is used to denote block-level structure\nVariables are assigned using the = operator\nPrint output using the print() function\nComments: # for single-line, ''' or \"\"\" for multi-line"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#data-types",
    "href": "presentaciones/pythonprogrammin.html#data-types",
    "title": "Python programming",
    "section": "Data Types",
    "text": "Data Types\n\nIntegers: int (e.g., 1, 2, 3)\nFloats: float (e.g., 3.14, -0.5)\nStrings: str (e.g., 'hello', \"hello\")\nBoolean: bool (e.g., True, False)\nList: list (e.g., [1, 2, 3], ['a', 'b', 'c'])\nDictionary: dict (e.g., {'name': 'John', 'age': 30})"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#control-structures",
    "href": "presentaciones/pythonprogrammin.html#control-structures",
    "title": "Python programming",
    "section": "Control Structures",
    "text": "Control Structures\n\nConditional statements:\n\nif statements: if condition : code\nelif statements: elif condition : code\nelse statements: else : code\n\nLoops:\n\nfor loops: for variable in iterable : code\nwhile loops: while condition : code"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#functions",
    "href": "presentaciones/pythonprogrammin.html#functions",
    "title": "Python programming",
    "section": "Functions",
    "text": "Functions\n\nReusable blocks of code\nTake arguments and return values\nCan be used to:\n\nOrganize code\nReduce repetition\nEncapsulate complex logic\n\nFunction definition: def function_name (arguments) : code"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#modules",
    "href": "presentaciones/pythonprogrammin.html#modules",
    "title": "Python programming",
    "section": "Modules",
    "text": "Modules\n\nPre-written code libraries\nImported using the import statement\nExamples:\n\nmath: mathematical functions (e.g., sin(), cos())\nrandom: random number generation (e.g., randint(), uniform())\ntime: time-related functions (e.g., time(), sleep())"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#exception-handling",
    "href": "presentaciones/pythonprogrammin.html#exception-handling",
    "title": "Python programming",
    "section": "Exception Handling",
    "text": "Exception Handling\n\nTry-except blocks:\n\ntry block: code that might raise an exception\nexcept block: code to handle the exception\n\nCatching specific exceptions:\n\nexcept ValueError : code\nexcept TypeError : code\n\nRaising exceptions:\n\nraise ValueError(message)"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#object-oriented-programming",
    "href": "presentaciones/pythonprogrammin.html#object-oriented-programming",
    "title": "Python programming",
    "section": "Object-Oriented Programming",
    "text": "Object-Oriented Programming\n\nClasses:\n\nDefine custom data types\nEncapsulate data and behavior\n\nObjects:\n\nInstances of classes\nHave attributes (data) and methods (behavior)\n\nInheritance:\n\nCreate new classes based on existing ones\nInherit attributes and methods"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#advanced-topics",
    "href": "presentaciones/pythonprogrammin.html#advanced-topics",
    "title": "Python programming",
    "section": "Advanced Topics",
    "text": "Advanced Topics\n\nDecorators:\n\nModify function behavior\nUse @ symbol to apply\n\nGenerators:\n\nSpecial type of iterable\nUse yield statement to define\n\nLambda functions:\n\nSmall, anonymous functions\nUse lambda keyword to define"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#decorators",
    "href": "presentaciones/pythonprogrammin.html#decorators",
    "title": "Python programming",
    "section": "Decorators",
    "text": "Decorators\n\ndef my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n\n    return wrapper\n\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\n\nsay_hello()\n\nSomething is happening before the function is called.\nHello!\nSomething is happening after the function is called."
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#conclusion",
    "href": "presentaciones/pythonprogrammin.html#conclusion",
    "title": "Python programming",
    "section": "Conclusion",
    "text": "Conclusion\n\nPython is a powerful and versatile language\nContinuously learning and practicing will help you master it\nExplore advanced topics and libraries to become proficient\n\n\n\n\n\nhttps://pablocaicedor.github.io/"
  },
  {
    "objectID": "presentaciones/pythonprogrammin.html#generators",
    "href": "presentaciones/pythonprogrammin.html#generators",
    "title": "Python programming",
    "section": "Generators",
    "text": "Generators\n\ndef infinite_sequence():\n    num = 0\n    while True:\n        yield num\n        num += 1\n\ngen = infinite_sequence()\nprint(next(gen))\n\n0\n\nprint(next(gen))\n\n1\n\nprint(next(gen))\n\n2\n\n\n\ncalcular_area_rectangulo = lambda base, altura: base * altura\nprint(calcular_area_rectangulo(4, 6))  # Salida: 24\n\n24"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#introduction",
    "href": "tutoriales/pythonprogrammin.html#introduction",
    "title": "Python programming",
    "section": "Introduction",
    "text": "Introduction\n\nPython is a high-level, interpreted programming language\nEasy to learn and understand\nVersatile and widely used in:\n\nWeb development\nData analysis and science\nArtificial intelligence and machine learning\nAutomation and scripting"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#basic-syntax",
    "href": "tutoriales/pythonprogrammin.html#basic-syntax",
    "title": "Python programming",
    "section": "Basic Syntax",
    "text": "Basic Syntax\n\nIndentation is used to denote block-level structure\nVariables are assigned using the = operator\nPrint output using the print() function\nComments: # for single-line, ''' or \"\"\" for multi-line"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#data-types",
    "href": "tutoriales/pythonprogrammin.html#data-types",
    "title": "Python programming",
    "section": "Data Types",
    "text": "Data Types\n\nIntegers: int (e.g., 1, 2, 3)\nFloats: float (e.g., 3.14, -0.5)\nStrings: str (e.g., 'hello', \"hello\")\nBoolean: bool (e.g., True, False)\nList: list (e.g., [1, 2, 3], ['a', 'b', 'c'])\nDictionary: dict (e.g., {'name': 'John', 'age': 30})"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#control-structures",
    "href": "tutoriales/pythonprogrammin.html#control-structures",
    "title": "Python programming",
    "section": "Control Structures",
    "text": "Control Structures\n\nConditional statements:\n\nif statements: if condition : code\nelif statements: elif condition : code\nelse statements: else : code\n\nLoops:\n\nfor loops: for variable in iterable : code\nwhile loops: while condition : code"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#functions",
    "href": "tutoriales/pythonprogrammin.html#functions",
    "title": "Python programming",
    "section": "Functions",
    "text": "Functions\n\nReusable blocks of code\nTake arguments and return values\nCan be used to:\n\nOrganize code\nReduce repetition\nEncapsulate complex logic\n\nFunction definition: def function_name (arguments) : code"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#modules",
    "href": "tutoriales/pythonprogrammin.html#modules",
    "title": "Python programming",
    "section": "Modules",
    "text": "Modules\n\nPre-written code libraries\nImported using the import statement\nExamples:\n\nmath: mathematical functions (e.g., sin(), cos())\nrandom: random number generation (e.g., randint(), uniform())\ntime: time-related functions (e.g., time(), sleep())"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#exception-handling",
    "href": "tutoriales/pythonprogrammin.html#exception-handling",
    "title": "Python programming",
    "section": "Exception Handling",
    "text": "Exception Handling\n\nTry-except blocks:\n\ntry block: code that might raise an exception\nexcept block: code to handle the exception\n\nCatching specific exceptions:\n\nexcept ValueError : code\nexcept TypeError : code\n\nRaising exceptions:\n\nraise ValueError(message)"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#object-oriented-programming",
    "href": "tutoriales/pythonprogrammin.html#object-oriented-programming",
    "title": "Python programming",
    "section": "Object-Oriented Programming",
    "text": "Object-Oriented Programming\n\nClasses:\n\nDefine custom data types\nEncapsulate data and behavior\n\nObjects:\n\nInstances of classes\nHave attributes (data) and methods (behavior)\n\nInheritance:\n\nCreate new classes based on existing ones\nInherit attributes and methods"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#advanced-topics",
    "href": "tutoriales/pythonprogrammin.html#advanced-topics",
    "title": "Python programming",
    "section": "Advanced Topics",
    "text": "Advanced Topics\n\nDecorators:\n\nModify function behavior\nUse @ symbol to apply\n\nGenerators:\n\nSpecial type of iterable\nUse yield statement to define\n\nLambda functions:\n\nSmall, anonymous functions\nUse lambda keyword to define"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#decorators",
    "href": "tutoriales/pythonprogrammin.html#decorators",
    "title": "Python programming",
    "section": "Decorators",
    "text": "Decorators\n\ndef my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n\n    return wrapper\n\n\n@my_decorator\ndef say_hello():\n    print(\"Hello!\")\n\n\nsay_hello()\n\nSomething is happening before the function is called.\nHello!\nSomething is happening after the function is called."
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#generators",
    "href": "tutoriales/pythonprogrammin.html#generators",
    "title": "Python programming",
    "section": "Generators",
    "text": "Generators\n\ndef infinite_sequence():\n    num = 0\n    while True:\n        yield num\n        num += 1\n\ngen = infinite_sequence()\nprint(next(gen))\n\n0\n\nprint(next(gen))\n\n1\n\nprint(next(gen))\n\n2"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#conclusion",
    "href": "tutoriales/pythonprogrammin.html#conclusion",
    "title": "Python programming",
    "section": "Conclusion",
    "text": "Conclusion\n\nPython is a powerful and versatile language\nContinuously learning and practicing will help you master it\nExplore advanced topics and libraries to become proficient\n\n\n\n\n\nhttps://pablocaicedor.github.io/"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#lambda-function",
    "href": "tutoriales/pythonprogrammin.html#lambda-function",
    "title": "Python programming",
    "section": "Lambda Function",
    "text": "Lambda Function\n\nrectangle_area_calculation = lambda base, height: base * height\nprint(rectangle_area_calculation(4, 6))  # Salida: 24\n\n24"
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#python",
    "href": "tutoriales/pythonprogrammin.html#python",
    "title": "Python programming",
    "section": "Python",
    "text": "Python\n\nPython is a high-level, interpreted, multi-paradigm, and general-purpose programming language.\nIts design philosophy emphasizes code readability.\nIt is one of the most popular programming languages in use today, and is used for a wide range of applications, including web development, data science, machine learning, and artificial intelligence."
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#advantages",
    "href": "tutoriales/pythonprogrammin.html#advantages",
    "title": "Python programming",
    "section": "Advantages",
    "text": "Advantages\n\nPython is a multi-paradigm programming language, meaning it can be used for different types of programming, such as object-oriented programming, imperative programming, and functional programming.\nPython is an interpreted programming language, meaning it does not need to be compiled before being executed. This makes Python very fast to develop and debug.\nPython is a highly portable programming language, meaning it can be run on different platforms, such as Windows, Mac OS X, and Linux. It can also be run in the cloud. Python has a large community of users and developers, meaning there are many resources available to learn and use Python."
  },
  {
    "objectID": "tutoriales/pythonprogrammin.html#disadvantages",
    "href": "tutoriales/pythonprogrammin.html#disadvantages",
    "title": "Python programming",
    "section": "Disadvantages",
    "text": "Disadvantages\n\nPython can be a bit slower than compiled languages, such as C or C++.\nPython has a slightly more complex syntax than some other programming languages, such as Java or JavaScript.\nPython may not be the best programming language for certain types of applications, such as game applications or high-performance applications."
  }
]