---
title: "Sistemas y Señales Biomédicos"
description: "SYSB"
subtitle: "Ingeniería Biomédica"
lang: es
author: "Ph.D. Pablo Eduardo Caicedo Rodríguez"
date: "`r Sys.Date()`"
format:
  revealjs: 
    code-tools: true
    code-overflow: wrap
    code-line-numbers: true
    code-copy: true
    fig-align: center
    self-contained: true
    theme: 
      - simple
      - ../../recursos/estilos/metropolis.scss
    slide-number: true
    preview-links: auto
    logo: ../../recursos/imagenes/generales/Escuela_Rosario_logo.png
    css: ../../recursos/estilos/styles_pres.scss
    footer: <https://pablocaicedor.github.io/>
    transition: fade
    progress: true
    scrollable: true

resources:
  - demo.pdf
---

```{r}
#| echo: false
#| eval: true
#| output: false
#| label: Loading R-Libraries
# install.packages(c("DiagrammeR", "reticulate", "kableExtra", "tidyverse", "knitr", "cowplot", "ggfx"))
library("DiagrammeR")
library("reticulate")
library("kableExtra")
library("tidyverse")
library("knitr")
library("cowplot")
library("ggfx")
knitr::opts_chunk$set(echo = FALSE)

def.chunk.hook <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
    x <- def.chunk.hook(x, options)
    ifelse(options$size != "normalsize", paste0("\n \\", options$size, "\n\n", x, "\n\n \\normalsize"), x)
})
```

```{python}
#| echo: false
#| eval: true
#| output: false
#| label: Loading Python-Libraries

import numpy as np
import matplotlib.pyplot as plt
import scipy.io as sio
import scipy.signal as sig


path_ecg="../../data"

```

# Sistemas y Señales Biomedicos - SYSB

# Frequency Content

## Introduction

- Signals can be analyzed in both **time domain** and **frequency domain**.
- The **frequency content** of a signal describes how different frequency components contribute to the overall signal.
- Applications in **biomedical signals, audio processing, communications, and image processing**.

---

## Convolution in Time Domain

- Convolution is a fundamental operation in signal processing.
- Given two signals $x(t)$ and $h(t)$, their convolution is defined as:
  
  $$ y(t) = x(t) * h(t) = \int_{-\infty}^{\infty} x(\tau) h(t - \tau) d\tau $$
  
- In **discrete-time**, convolution is:
  
  $$ y[n] = \sum_{k=-\infty}^{\infty} x[k] h[n-k] $$

---

## Convolution Theorem

- **Convolution in time domain corresponds to multiplication in frequency domain**:
  
  $$ X(f) H(f) = Y(f) $$
  
- This property is crucial in filter design and system analysis.

```{python}
#| echo: false
#| eval: true
#| output: true
#| fig-align: center
#| label: Loading Imag01


# Define two signals
x = np.array([1, 2, 3, 4, 5])  # Input signal
h = np.array([1, -1, 2])       # System response

# Compute convolution
y = sig.convolve(x, h, mode='full')

# Create subplots
fig, axs = plt.subplots(1, 3, figsize=(20, 6), sharey=True)

# Plot input signal
axs[0].stem(x, linefmt="k", markerfmt="ko", basefmt="k-", label="Input Signal")
axs[0].set_title("Input Signal x[n]")
axs[0].set_ylabel("Amplitude")
axs[0].legend()
axs[0].grid()

# Plot system response
axs[1].stem(h, linefmt="b", markerfmt="bo", basefmt="b-", label="System h[n]")
axs[1].set_title("System Response h[n]")
axs[1].set_ylabel("Amplitude")
axs[1].legend()
axs[1].grid()

# Plot convolution output
axs[2].stem(y, linefmt="r", markerfmt="ro", basefmt="r-", label="Output y[n]")
axs[2].set_title("Convolution Output y[n] = x[n] * h[n]")
axs[2].set_xlabel("n")
axs[2].set_ylabel("Amplitude")
axs[2].legend()
axs[2].grid()

# Adjust layout and show plot
plt.tight_layout()
plt.show()


```

---

## Introduction to Fourier Series

```{python}
#| echo: false
#| eval: true
#| output: true
#| fig-align: center
#| label: image quiver

# Define two orthogonal vectors
v1 = np.array([1, 0])  # X-axis unit vector
v2 = np.array([0, 1])  # Y-axis unit vector

# Define a third vector
v3 = np.array([2, 3])  # Arbitrary vector

# Compute projections of v3 onto v1 and v2
proj_v1 = (np.dot(v3, v1) / np.dot(v1, v1)) * v1
proj_v2 = (np.dot(v3, v2) / np.dot(v2, v2)) * v2

# Create a figure
fig, ax = plt.subplots(figsize=(10, 10))

# Plot projections using quiver
ax.quiver(
    0,
    0,
    *proj_v1,
    color="purple",
    angles="xy",
    scale_units="xy",
    scale=1,
    label="Projection on v1"
)
ax.quiver(
    0,
    0,
    *proj_v2,
    color="orange",
    angles="xy",
    scale_units="xy",
    scale=1,
    label="Projection on v2"
)

# Plot the orthogonal vectors
ax.quiver(
    0, 0, *v1, color="r", angles="xy", scale_units="xy", scale=1, label="v1 (X-axis)"
)
ax.quiver(
    0, 0, *v2, color="g", angles="xy", scale_units="xy", scale=1, label="v2 (Y-axis)"
)

# Plot the third vector
ax.quiver(0, 0, *v3, color="b", angles="xy", scale_units="xy", scale=1, label="v3")



# Plot dashed lines to show projection points
ax.plot([proj_v1[0], v3[0]], [proj_v1[1], v3[1]], "k--", alpha=0.5)  # Projection to v1
ax.plot([proj_v2[0], v3[0]], [proj_v2[1], v3[1]], "k--", alpha=0.5)  # Projection to v2

# Set grid and limits
ax.set_xlim(-1, 4)
ax.set_ylim(-1, 4)
ax.set_xlabel("X-axis")
ax.set_ylabel("Y-axis")
ax.set_title("Two Orthogonal Vectors & Projection of a Third Vector")
ax.axhline(0, color="black", linewidth=1)
ax.axvline(0, color="black", linewidth=1)
ax.grid()
ax.legend()

# Show the plot
plt.show()
```

---

## Introduction to Fourier Series

- **Convolution** requiere the representation of the signal in a sum of impulse functions.
- **Fourier series** represents periodic signals as a sum of sinusoids:
  
  $$ x(t) = \sum_{n=-\infty}^{\infty} C_n e^{jn\omega_0 t} $$
  
  where $C_n$ are the Fourier coefficients.

- Decomposing a signal into sinusoidal components allows **frequency analysis**.

---

## Fourier Coefficients

- The Fourier coefficients $C_n$ are computed as:
  
  $$ C_n = \frac{1}{T} \int_{0}^{T} x(t) e^{-jn\omega_0 t} dt $$

- Determines how much of each frequency is present in the signal.

---

## Example of Fourier Series Expansion

```{python}
#| echo: false
#| eval: true
#| output: true
#| label: Imag02

import numpy as np
import matplotlib.pyplot as plt

T = 2*np.pi  # Period
w0 = 2*np.pi / T  # Fundamental frequency
t = np.linspace(0, T, 400)

# Fourier series approximation of a square wave
x_approx = (4/np.pi) * (np.sin(w0*t) + (1/3)*np.sin(3*w0*t) + (1/5)*np.sin(5*w0*t))

plt.plot(t, x_approx, label="Fourier Approximation")
plt.title("Fourier Series Approximation of a Square Wave")
plt.xlabel("Time")
plt.ylabel("Amplitude")
plt.legend()
plt.show()

```

---

## Example 2 of Fourier Series

```{python}
#| echo: false
#| eval: true
#| output: true
#| label: Example 02

# Datos del gráfico
t = [0, 5, 10, 15, 15, 20, 25, 30]
a = [8, 8, 5, 5, 8, 8, 5, 5]

# Crear la figura y el eje
plt.figure(figsize=(8, 5))
plt.plot(t, a, marker="o", linestyle="-", color="black")

# Etiquetas de los ejes
plt.xlabel("t", fontsize=18)
plt.ylabel("A", fontsize=18)

# Configurar tamaño de fuente para los ticks
printf = 18
plt.xticks(fontsize=printf)
plt.yticks(fontsize=printf)

# Agregar rejilla para mejor visualización
plt.grid(True, linestyle="--", alpha=0.6)

# Mostrar el gráfico
plt.show()

```

## Example 2 of Fourier Series

```{python}
#| echo: false
#| eval: true
#| output: true
#| label: Example 02 2

# Definir la función periódica por partes con periodo 15
def A(t):
    t = t % 15  # Hacer la función periódica con periodo 15
    if 0 <= t < 5:
        return 8
    elif 5 <= t < 10:
        m = -3 / 5
        return m * t + 11
    elif 10 <= t <= 15:
        return 5
    else:
        return None  # Fuera del dominio especificado


# Crear valores de t
t_values = np.linspace(-30, 30, 200)  # Extender para ver la periodicidad
a_values = [A(t) for t in t_values]

# Crear la figura y el eje
plt.figure(figsize=(8, 5))
plt.plot(t_values, a_values, linestyle="-", color="black")

# Etiquetas de los ejes
plt.xlabel("t", fontsize=18)
plt.ylabel("A", fontsize=18)

# Configurar tamaño de fuente para los ticks
printf = 18
plt.xticks(fontsize=printf)
plt.yticks(fontsize=printf)

# Agregar rejilla para mejor visualización
plt.grid(True, linestyle="--", alpha=0.6)

# Mostrar el gráfico
plt.show()

```

## **Linearity**
- If $f_1(x)$ and $f_2(x)$ have Fourier series,
- Then for any constants $a, b$,
- $a f_1(x) + b f_2(x)$ has a Fourier series,
- With coefficients scaled accordingly.

---

## **Time Shifting**
- If $f(x)$ has Fourier coefficients $a_n, b_n$,
- Then $f(x - x_0)$ has coefficients:
- $a_n \cos(n\omega x_0) + b_n \sin(n\omega x_0)$,
- And $b_n \cos(n\omega x_0) - a_n \sin(n\omega x_0)$.

---

## **Frequency Scaling**
- If $g(x) = f(cx)$,
- Then the period scales by $c$,
- The fundamental frequency changes to $c\omega$,
- Fourier coefficients adjust accordingly.

---

## ** Differentiation Property**
- If $f(x)$ is differentiable,
- Then $f'(x)$ has Fourier series,
- With coefficients scaled as $n a_n, n b_n$,
- Higher frequencies get amplified.

---

## **Integration Property**
- If $f(x)$ has a Fourier series,
- Then $\int f(x) dx$ has a Fourier series,
- With coefficients scaled as $\frac{a_n}{n}, \frac{b_n}{n}$,
- Lower frequencies get emphasized.

---

## **Parseval’s Theorem**
- The total signal energy is conserved,
- Energy in time domain equals energy in frequency domain,
- Given by:
- $\sum (a_n^2 + b_n^2) = \frac{1}{T} \int |f(x)|^2 dx$.

---

## **Convolution Property**
- Convolution in time domain,
- Is multiplication in Fourier series coefficients,
- If $f_1$ and $f_2$ are convoluted,
- Their Fourier coefficients multiply component-wise.

---

## **Discrete Time Fourier Series**
- Represents periodic discrete signals using harmonics.
- Extends Fourier series to discrete-time domain.
- Fundamental in digital signal processing.
- Basis for the Discrete Fourier Transform (DFT).

---

## **Mathematical Expression**
- A periodic sequence $x[n]$ can be expressed as:
- $$x[n] = \sum_{k=0}^{N-1} C_k e^{j(2\pi k n / N)}$$.
- The coefficients $C_k$ are computed as:
- $C_k = \frac{1}{N} \sum_{n=0}^{N-1} x[n] e^{-j(2\pi k n / N)}$.

---

## **Periodicity and Symmetry**
- The coefficients $C_k$ repeat every $N$.
- Ensures correct reconstruction of signals.
- Explains frequency domain representation.
- Basis for spectral analysis.

---

## **Key Properties**
- **Linearity**: Superposition holds.
- **Time Shift**: Causes phase shift in coefficients.
- **Parseval’s Theorem**: Energy conservation.
- **Convolution**: Time convolution → Frequency multiplication.

---

## **Frequency Domain Interpretation**
- $C_k$ represents discrete frequency content.
- The spectrum consists of $N$ harmonics.
- Resolution improves with larger $N$.
- Essential for analyzing periodic discrete signals.

---

## **Comparison with Continuous Case**
- DTFS applies to discrete periodic signals.
- Continuous Fourier series applies to continuous functions.
- Both represent signals as sums of sinusoids.
- DTFS is used in digital communications and audio processing.


## Example of th DTFS

```{python}
#| echo: false
#| eval: true
#| output: true
#| label: Example of DTFS

# Define a periodic discrete signal
N = 8  # Period of the signal
n = np.arange(N)
x_n = np.array([1, 2, 3, 4, 3, 2, 1, 0])  # Example discrete signal

# Compute DTFS coefficients
C_k = np.fft.fft(x_n) / N  # Normalized Discrete Fourier Transform

# Reconstruct the signal using DTFS
x_reconstructed = np.zeros(N, dtype=complex)
for k in range(N):
    x_reconstructed += C_k[k] * np.exp(1j * 2 * np.pi * k * n / N)

# Plot original and reconstructed signals
plt.figure(figsize=(10, 4))
plt.stem(n, x_n, linefmt='b-', markerfmt='bo', basefmt='r-', label='Original Signal')
plt.stem(n, np.real(x_reconstructed), linefmt='r--', markerfmt='go', basefmt='r-', label='Reconstructed Signal')
plt.xlabel("n")
plt.ylabel("Amplitude")
plt.title("DTFS: Original vs Reconstructed Signal")
plt.legend()
plt.grid()
plt.show()

# Print DTFS Coefficients
print("DTFS Coefficients:")
for k in range(N):
    print(f"C[{k}] = {C_k[k]:.4f}")

```

## Example 02

```{python}
#| echo: false
#| eval: true
#| output: true
#| label: example of dtfs periodicity

# Define a periodic discrete signal
N = 8  # Period of the signal
n = np.arange(N)
x_n = np.array([1, 2, 3, 4, 3, 2, 1, 0])  # Example discrete signal

# Compute DTFS coefficients
C_k = np.fft.fft(x_n) / N  # Normalized Discrete Fourier Transform

# Verify periodicity property: C[k] repeats every N
C_k_extended = np.tile(C_k, 2)  # Extend coefficients to see repetition
k_extended = np.arange(2 * N)

# Plot DTFS coefficients and their periodic repetition
plt.figure(figsize=(10, 4))
plt.stem(
    k_extended,
    np.real(C_k_extended),
    linefmt="b-",
    markerfmt="bo",
    basefmt="r-",
    label="Real Part",
)
plt.stem(
    k_extended,
    np.imag(C_k_extended),
    linefmt="g--",
    markerfmt="go",
    basefmt="r-",
    label="Imaginary Part",
)
plt.xlabel("n")
plt.ylabel("Magnitude")
plt.title("DTFS Periodicity: Coefficients Repeat Every N Samples")
plt.legend()
plt.grid()
plt.show()

# Print DTFS Coefficients to observe periodicity
# print("DTFS Coefficients (showing periodicity):")
# for k in range(2 * N):
#     print(f"C[{k}] = {C_k_extended[k]:.4f}")

```


## **Conceptual Foundation**
- Fourier Series represents periodic signals in terms of sinusoids.
- As period $T \to \infty$, the signal becomes aperiodic.
- The Fourier Transform generalizes Fourier Series to aperiodic signals.
- Transforms signals from time to frequency domain.

---

## **Mathematical Transition**
- Fourier Series of a periodic signal:
- $$f(x) = \sum_{n=-\infty}^{\infty} C_n e^{j(2\pi n x / T)}$$.
- As $T \to \infty$, frequency spacing $\frac{1}{T}$ → differential.
- Leads to the Fourier Transform:
- $$F(\omega) = \int_{-\infty}^{\infty} f(x) e^{-j\omega x} dx$$.

---

## **Frequency Spectrum Interpretation**
- Fourier Series: discrete frequency spectrum.
- Fourier Transform: continuous frequency spectrum.
- Coefficients $C_n$ become the function $F(\omega)$.
- Allows analysis of arbitrary signals in frequency domain.

---

## **Inverse Fourier Transform**
- Recovers time-domain signal from $F(\omega)$.
- Defined as:
- $$f(x) = \frac{1}{2\pi} \int_{-\infty}^{\infty} F(\omega) e^{j\omega x} d\omega$$.
- Ensures complete information preservation.
- Basis for signal reconstruction in DSP.

---

## **Energy and Parseval’s Theorem**
- Energy conservation in time and frequency domains.
- Parseval’s theorem states:
- $$\int |f(x)|^2 dx = \frac{1}{2\pi} \int |F(\omega)|^2 d\omega$$.
- Ensures no energy loss between domains.