{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Procesamiento de Señales e Imagenes\"\n",
        "description: \"PSIM -- 101849\"\n",
        "subtitle: \"Ingeniería Biomédica\"\n",
        "lang: es\n",
        "author: \"Ph.D. Pablo Eduardo Caicedo Rodríguez\"\n",
        "date: last-modified\n",
        "format:\n",
        "  revealjs: \n",
        "    code-tools: true\n",
        "    code-overflow: wrap\n",
        "    code-line-numbers: true\n",
        "    code-copy: true\n",
        "    fig-align: center\n",
        "    self-contained: true\n",
        "    theme: \n",
        "      - simple\n",
        "      - ../../recursos/estilos/metropolis.scss\n",
        "    slide-number: true\n",
        "    preview-links: auto\n",
        "    logo: ../../recursos/imagenes/generales/Escuela_Rosario_logo.png\n",
        "    css: ../../recursos/estilos/styles_pres.scss\n",
        "    footer: <https://pablocaicedor.github.io/>\n",
        "    transition: fade\n",
        "    progress: true\n",
        "    scrollable: true\n",
        "    mainfont: \"Fira Code\"\n",
        "---\n",
        "\n",
        "## 1) Título y propósito\n",
        "\n",
        "**Procesamiento de señales e imágenes**\n",
        "*Cómo transformar datos del mundo (sonidos, fotos, mediciones) en información útil para la vida diaria y la salud.*\n",
        "\n",
        "**Preguntas guía**\n",
        "\n",
        "* ¿Qué es una *señal* en la vida cotidiana?\n",
        "* ¿Qué es una *imagen* y cómo la entiende un computador?\n",
        "* ¿Por qué *procesarlas* mejora fotos, audios y ayuda en medicina?\n",
        "\n",
        ":::{.notes}\n",
        "Guion: Romper el hielo preguntando: “¿Qué señales usan a diario sin darse cuenta?” (Wi-Fi, música, pulso). Explicar que hoy “miraremos” y “escucharemos” datos como lo hace una computadora.\n",
        "Dinámica: Levanten la mano si alguna vez una foto les salió borrosa y el teléfono la “arregló”. ¿Qué pasó detrás?\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 2) ¿Qué es una señal?\n",
        "\n",
        "Una **señal** es *información que cambia con el tiempo* o con otra variable.\n",
        "Ejemplos intuitivos:\n",
        "\n",
        "* **Audio/voz:** la amplitud del sonido sube y baja.\n",
        "* **Temperatura ambiental:** varía a lo largo del día.\n",
        "* **Pulso cardíaco:** latido a latido, cuenta una historia del cuerpo.\n",
        "\n",
        ":::{.notes}\n",
        "Analogía: La señal es como un cuento por capítulos; cada instante agrega una línea a la historia. Objetivo: que reconozcan señales a su alrededor (semáforos, brillo de la pantalla, ritmo al caminar).\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 3) ¿Qué es una imagen?\n",
        "\n",
        "Una **imagen digital** es una “rejilla” de puntitos llamados **píxeles**.\n",
        "Cada píxel guarda *brillo* y *color*.\n",
        "Al cambiar estos valores de forma ordenada, aparece una foto reconocible.\n",
        "\n",
        ":::{.notes}\n",
        "Analogía: Piensa en mosaicos: cada baldosa aporta un color; juntas forman una figura. Objetivo: entender que “ver” para la máquina es leer números en una tabla.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 4) ¿Por qué procesarlas?\n",
        "\n",
        "**Cotidiano**\n",
        "\n",
        "* Hacer fotos más **nítidas** y menos **ruidosas**.\n",
        "* **Comprimir** para enviar más rápido sin que se note la diferencia.\n",
        "* **Reconocer patrones**: voz, rostros, gestos simples.\n",
        "\n",
        "**Salud**\n",
        "\n",
        "* **ECG/EEG:** ver ritmos y detectar señales de alerta.\n",
        "* **Imágenes médicas (rayos-X, TAC, RM, ecografía):** apoyar diagnóstico y guiar tratamientos.\n",
        "\n",
        ":::{.notes}\n",
        "Pregunta detonante: ¿Qué prefieren, un médico mirando una imagen “cruda” o una imagen mejorada que resalte detalles importantes? Introducir idea de apoyo, no reemplazo, a profesionales.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 5) Demostraciones rápidas (Python)\n",
        "\n",
        "### 5.1 Voz sintética: señal seno con ruido + “espectro” simple"
      ],
      "id": "5a4f5e5e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | fig-cap: \"Señal tipo voz: tono de 440 Hz con ruido.\"\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "Fs = 8000             # frecuencia de muestreo (Hz)\n",
        "T  = 2.0              # duración (s)\n",
        "t  = np.linspace(0, T, int(Fs*T), endpoint=False)\n",
        "\n",
        "f0 = 440.0            # \"La\" musical\n",
        "x  = np.sin(2*np.pi*f0*t)\n",
        "ruido = 0.3*np.random.randn(len(t))\n",
        "y  = x + ruido\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(t[:1600], y[:1600])  # primeros 0.2 s para ver detalle\n",
        "plt.xlabel(\"Tiempo (s)\")\n",
        "plt.ylabel(\"Amplitud\")\n",
        "plt.title(\"Señal con ruido (fragmento)\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "cfecd2fd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | fig-cap: \"Espectro de magnitud (frecuencias presentes).\"\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "Fs = 8000\n",
        "T  = 2.0\n",
        "t  = np.linspace(0, T, int(Fs*T), endpoint=False)\n",
        "f0 = 440.0\n",
        "y  = np.sin(2*np.pi*f0*t) + 0.3*np.random.randn(len(t))\n",
        "\n",
        "Y   = np.fft.rfft(y)\n",
        "f   = np.fft.rfftfreq(len(y), d=1/Fs)\n",
        "mag = np.abs(Y)\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(f, mag)\n",
        "plt.xlim(0, 2000)\n",
        "plt.xlabel(\"Frecuencia (Hz)\")\n",
        "plt.ylabel(\"Magnitud\")\n",
        "plt.title(\"‘Huella’ en frecuencia: pico cerca de 440 Hz\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "c67ee467",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.notes}\n",
        "Guion: Relacionar el pico con “qué tan fuerte” está ese tono en la mezcla. “Escuchar” para la compu es medir contribuciones de frecuencias.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### 5.2 ECG sintético simplificado (5–8 latidos)"
      ],
      "id": "c3d7fd2b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | fig-cap: \"ECG sintético con latidos y leve ruido.\"\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "Fs = 250\n",
        "dur = 8.0\n",
        "t = np.linspace(0, dur, int(Fs*dur), endpoint=False)\n",
        "\n",
        "# Ritmo ~70 lpm (periodo ~0.857 s)\n",
        "rr = 60/70\n",
        "signal = np.zeros_like(t)\n",
        "\n",
        "# Modelar QRS con una gaussiana angosta y P/T suaves\n",
        "def gauss(t, mu, sigma, amp):\n",
        "    return amp*np.exp(-0.5*((t-mu)/sigma)**2)\n",
        "\n",
        "for k in range(int(dur/rr)+2):\n",
        "    tc = k*rr\n",
        "    signal += gauss(t, tc-0.2, 0.04, 0.12)   # onda P\n",
        "    signal += gauss(t, tc,      0.02, 1.2)   # QRS\n",
        "    signal += gauss(t, tc+0.3,  0.06, 0.25)  # onda T\n",
        "\n",
        "# Ruido blanco leve\n",
        "signal += 0.03*np.random.randn(len(t))\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(t, signal)\n",
        "plt.xlabel(\"Tiempo (s)\")\n",
        "plt.ylabel(\"mV (relativo)\")\n",
        "plt.title(\"ECG sintético (~70 lpm)\")\n",
        "plt.xlim(0, dur)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "741bbff4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.notes}\n",
        "Guion: Identificar “picos” (QRS) como los aplausos fuertes en un concierto: marcan el ritmo. Aclarar que en clínica real hay más detalles y calibración.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### 5.3 EEG tipo banda alfa (\\~10 Hz intermitente)"
      ],
      "id": "41dd8ed5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | fig-cap: \"EEG sintético: ruido 1/f + ráfagas ~10 Hz (alfa).\"\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "Fs = 250\n",
        "dur = 5.0\n",
        "N = int(Fs*dur)\n",
        "\n",
        "# Ruido blanco -> modelado de ruido 1/f en frecuencia\n",
        "white = np.random.randn(N)\n",
        "W = np.fft.rfft(white)\n",
        "f = np.fft.rfftfreq(N, d=1/Fs)\n",
        "pink_filter = np.ones_like(f)\n",
        "pink_filter[1:] = 1/np.sqrt(f[1:])  # atenuar altas frecuencias\n",
        "P = W * pink_filter\n",
        "pink = np.fft.irfft(P, n=N)\n",
        "\n",
        "# Componente alfa (10 Hz) en ráfagas\n",
        "t = np.arange(N)/Fs\n",
        "alpha = np.sin(2*np.pi*10*t)\n",
        "envelope = ((t>1) & (t<2)) | ((t>3.2) & (t<4.4))\n",
        "alpha *= envelope.astype(float)\n",
        "\n",
        "eeg = 0.7*pink/np.max(np.abs(pink)) + 0.6*alpha\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(t, eeg)\n",
        "plt.xlabel(\"Tiempo (s)\")\n",
        "plt.ylabel(\"µV (relativo)\")\n",
        "plt.title(\"EEG sintético con actividad alfa intermitente\")\n",
        "plt.xlim(0, dur)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "7351ac03",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.notes}\n",
        "Guion: Explicar que la actividad cerebral tiene “bandas” de frecuencia; la alfa (\\~8–13 Hz) puede aparecer cuando estamos relajados con ojos cerrados. Esto es una caricatura útil, no un registro clínico.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "### 5.4 Procesamiento de imagen (desenfoque y realce)"
      ],
      "id": "5979f5a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | fig-cap: \"Imagen de prueba (degradado + cuadros).\"\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "H, W = 256, 256\n",
        "# Degradado horizontal\n",
        "grad = np.tile(np.linspace(0, 1, W), (H,1))\n",
        "# Agregar cuadros\n",
        "img = grad.copy()\n",
        "img[60:120, 60:120] = 1.0\n",
        "img[140:200, 140:200] = 0.2\n",
        "\n",
        "plt.figure()\n",
        "plt.imshow(img, cmap=\"gray\", vmin=0, vmax=1)\n",
        "plt.axis(\"off\")\n",
        "plt.title(\"Original (sintética)\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "b5dd71e4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | fig-cap: \"Realce (unsharp mask) a partir de desenfoque caja 3×3.\"\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def box_blur(im):\n",
        "    k = np.ones((3,3), dtype=float)/9.0\n",
        "    H, W = im.shape\n",
        "    pad = np.pad(im, 1, mode=\"edge\")\n",
        "    out = np.zeros_like(im)\n",
        "    for i in range(H):\n",
        "        for j in range(W):\n",
        "            out[i,j] = np.sum(pad[i:i+3, j:j+3]*k)\n",
        "    return out\n",
        "\n",
        "# Partir de la misma imagen generada (repetimos por reproducibilidad)\n",
        "H, W = 256, 256\n",
        "grad = np.tile(np.linspace(0, 1, W), (H,1))\n",
        "img = grad.copy()\n",
        "img[60:120, 60:120] = 1.0\n",
        "img[140:200, 140:200] = 0.2\n",
        "\n",
        "blur = box_blur(img)\n",
        "# Unsharp mask: realce = original + α*(original - blur)\n",
        "alpha = 1.0\n",
        "sharpen = np.clip(img + alpha*(img - blur), 0, 1)\n",
        "\n",
        "plt.figure()\n",
        "plt.imshow(sharpen, cmap=\"gray\", vmin=0, vmax=1)\n",
        "plt.axis(\"off\")\n",
        "plt.title(\"Procesada (realce a partir de desenfoque)\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "b2694c7b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::{.notes}\n",
        "Guion: “Desenfocar” promedia vecinos (quita detalle y ruido); el *unsharp mask* resalta bordes sumando el contraste perdido. Pedir que comparen bordes del cuadro.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 6) Proyectos cotidianos (idea conceptual)\n",
        "\n",
        "* **Reconocimiento básico de patrones en voz:** distinguir entre vocales largas/cortas por su “huella” en frecuencia.\n",
        "* **Clasificación de imágenes simples:** identificar un símbolo (corazón, estrella) por su contorno.\n",
        "* **Apps del día a día:** reducción de ruido en llamadas, estabilización de video, filtros de cámara.\n",
        "\n",
        ":::{.notes}\n",
        "Actividad breve: mostrar dos espectros (uno con pico \\~440 Hz, otro \\~880 Hz) y preguntar cuál es más “agudo”. Objetivo: enlazar percepción con representación.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 7) Proyectos biomédicos (propósito y ética)\n",
        "\n",
        "* **ECG:** apoyar la detección de ritmos irregulares para alertar a tiempo.\n",
        "* **EEG:** estudiar estados de sueño o episodios que requieren atención.\n",
        "* **Imágenes médicas:** resaltar estructuras (hueso, tejido blando) para guiar decisiones.\n",
        "\n",
        "**Cautelas éticas**\n",
        "\n",
        "* Los algoritmos **no reemplazan** a profesionales.\n",
        "* Debe haber **validación clínica** y supervisión experta.\n",
        "* Evitar **sesgos** que afecten a grupos poblacionales.\n",
        "\n",
        ":::{.notes}\n",
        "Guion: Subrayar que la tecnología es una lupa: amplifica, no decide por sí sola. Citar privacidad y consentimiento.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 8) Limitaciones y ética\n",
        "\n",
        "* **Datos sesgados** → resultados injustos.\n",
        "* **Privacidad**: proteger información personal y de pacientes.\n",
        "* **Consentimiento informado**: especialmente con imágenes de personas.\n",
        "* **Transparencia**: explicar qué hace el sistema y sus límites.\n",
        "\n",
        ":::{.notes}\n",
        "Idea clave: “Si no está bien medido, no estará bien decidido”. Pregunta: ¿qué riesgos ven al entrenar con pocas personas de ciertas edades o regiones?\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 9) Recursos e **imágenes libres** (repositorios y créditos)\n",
        "\n",
        "**Repositorios verificados**\n",
        "\n",
        "* **Wikimedia Commons** (metadatos/licencias claros).\n",
        "* **Unsplash** (Licencia Unsplash: uso libre, atribución no obligatoria; recomendable acreditar autor).\n",
        "* **Pixabay** (CC0/PD, según archivo).\n",
        "\n",
        "**Imágenes sugeridas para carpeta `images/` (descargar y acreditar):**\n",
        "\n",
        "* `images/Normal_ECG_2.svg` — *Normal ECG 2* (CC BY-SA 3.0). Wikimedia Commons. ([Wikimedia Commons][1])\n",
        "* `images/MRI_Brain_T1_Axial_11.jpg` — *MRI Brain T1 Axial (11)* (CC BY-SA 4.0). Wikimedia Commons. ([Wikimedia Commons][2])\n",
        "* `images/Ultrasound_image_110316103934_1045590.jpg` — Ecografía (CC BY-SA 3.0) por **Nevit Dilmen**. Wikimedia Commons. ([Wikimedia Commons][3])\n",
        "* (Opcional) Foto contextual sin pacientes: *Doctor using stethoscope…* (Licencia Unsplash). Guardar como `images/unsplash_stethoscope.jpg`. ([Unsplash][4])\n",
        "\n",
        "**Nota sobre consentimiento y pacientes en imágenes:** ver guía de Commons sobre imágenes de pacientes. ([Wikimedia Commons][5])\n",
        "\n",
        ":::{.notes}\n",
        "Instrucciones: Verificar en cada página de Commons la licencia exacta y texto de atribución. En Unsplash, aunque no es obligatorio, incluir nombre del autor y enlace.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 10) Cierre y preguntas\n",
        "\n",
        "**Ideas para proyectos escolares breves**\n",
        "\n",
        "* “Mi barrio suena”: medir ruido con el celular y graficar cómo cambia a lo largo del día.\n",
        "* “Foto más clara”: comparar imagen original vs. procesada con el realce mostrado.\n",
        "* “Ritmo saludable”: simular un ECG y medir el intervalo entre picos.\n",
        "\n",
        "**Mensaje final**\n",
        "Procesar señales e imágenes es *aprender a leer historias* que cuentan los datos para tomar mejores decisiones.\n",
        "\n",
        ":::{.notes}\n",
        "Guion: Abrir turno de preguntas. Proponer que formen equipos y elijan un mini-proyecto con datos accesibles y sin información sensible.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## 11) Referencias (introductorias y de divulgación)\n",
        "\n",
        "* Mneney, S. H. **An Introduction to Digital Signal Processing: A Focus on Implementation** (Open Access). OAPEN. (2008). ([library.oapen.org][6])\n",
        "* IEEE Signal Processing Society. **Signal Processing 101** (página divulgativa). ([IEEE Signal Processing Society][7])\n",
        "* Li, M. et al. **Medical image analysis using deep learning algorithms**. *Electronics*, 2023 (OA, PMC). ([PMC][8])\n",
        "* Hadaeghi, F. **An Introduction to Biomedical Signal Processing (Lecture Notes)** (OA PDF). ([ai.rug.nl][9])\n",
        "* (En verificación) Capítulos introductorios de *Biomedical Image Processing* (Deserno). Revisión en PMC. Alternativas reales:\n",
        "\n",
        "  * *Medical Image Analysis* (Elsevier, opciones OA). ([ScienceDirect][10])\n",
        "  * *Biomedical Signal Processing and Control* (Elsevier, opciones OA). ([ScienceDirect][11])\n",
        "\n",
        ":::{.notes}\n",
        "Aclaración: fuentes seleccionadas por acceso abierto y carácter introductorio. Si alguna queda inaccesible, mantener como “en verificación” y usar alternativas OA listadas.\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Notas de producción (para el docente)\n",
        "\n",
        "* **Base utilizada (`TallerPrimerSemestre.qmd`)**: se revisaron estructura narrativa, tono de bienvenida y algunas ideas para dinámicas. No se reutilizaron celdas con dependencias o estilos no requeridos, ni se mantuvieron secciones que excedían el nivel 10–11 o requerían matemáticas. Se ajustó cohesión y se añadió la secuencia exigida (1–11) y los cuatro bloques Python con **matplotlib** exclusivamente.\n",
        "* **Reproducibilidad**: cada bloque fija `np.random.seed(42)` y evita librerías externas.\n",
        "* **Imágenes**: descargar a `images/` con los nombres indicados y conservar créditos/licencias en la diapositiva 9.\n",
        "\n",
        ":::{.notes}\n",
        "Checklist del docente antes de presentar:\n",
        "\n",
        "1. Ejecutar todas las celdas (`quarto render`) y verificar que cada figura aparece en <2 s.\n",
        "2. Confirmar que los archivos en `images/` existen con los nombres propuestos.\n",
        "3. Mantener visible la diapositiva 9 para aclarar licencias si se pregunta.\n",
        "4. Preparar 1–2 preguntas detonantes extra según el grupo.\n",
        "   :::\n",
        "\n",
        "---\n",
        "\n",
        "## Referencias\n",
        "\n",
        "[1]: https://commons.wikimedia.org/wiki/File%3ANormal_ECG_2.svg?utm_source=chatgpt.com \"File:Normal ECG 2.svg - Wikimedia Commons\"\n",
        "[2]: https://commons.wikimedia.org/wiki/File%3AMRI_Brain_T1_Axial_%2811%29.jpg?utm_source=chatgpt.com \"File:MRI Brain T1 Axial (11).jpg\"\n",
        "[3]: https://commons.wikimedia.org/wiki/File%3AUltrasound_image_110316103934_1045590.jpg?utm_source=chatgpt.com \"File:Ultrasound image 110316103934 1045590.jpg\"\n",
        "[4]: https://unsplash.com/photos/doctor-using-stethoscope-examination-his-patient-in-hospital-BXU2Z_YXJoo?utm_source=chatgpt.com \"Doctor using stethoscope examination his patient in hospital.\"\n",
        "[5]: https://commons.wikimedia.org/wiki/Commons%3APatient_images?utm_source=chatgpt.com \"Commons:Patient images\"\n",
        "[6]: https://library.oapen.org/bitstream/handle/20.500.12657/59716/9781000793888.pdf?isAllowed=y&sequence=1&utm_source=chatgpt.com \"An Introduction to Digital Signal Processing: A Focus on ...\"\n",
        "[7]: https://signalprocessingsociety.org/our-story/signal-processing-101?utm_source=chatgpt.com \"Signal Processing 101\"\n",
        "[8]: https://pmc.ncbi.nlm.nih.gov/articles/PMC10662291/?utm_source=chatgpt.com \"Medical image analysis using deep learning algorithms - PMC\"\n",
        "[9]: https://www.ai.rug.nl/minds/uploads/Chapter%201_introduction.pdf?utm_source=chatgpt.com \"An Introduction to Biomedical Signal Processing Lecture ...\"\n",
        "[10]: https://www.sciencedirect.com/journal/medical-image-analysis/publish/open-access-options?utm_source=chatgpt.com \"Open access information - Medical Image Analysis\"\n",
        "[11]: https://www.sciencedirect.com/journal/biomedical-signal-processing-and-control/publish/open-access-options?utm_source=chatgpt.com \"Biomedical Signal Processing and Control - ISSN 1746-8094\""
      ],
      "id": "6e64f47a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/sylph/DataCantatio/ai-torch/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}